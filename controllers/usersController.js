import Sequelize from 'sequelize';
import dotenv from 'dotenv'
dotenv.config()
const sequelize = new Sequelize('estrynode', 'root', process.env.PASSWORD,{
    host: '',
    dialect: 'mysql'
});

import UserConstructor from '../models/user.js';
const User = UserConstructor(sequelize, Sequelize)
//GET
//–ü—Ä–æ—Å—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
function getUser(req, res){
    console.log('getting user', req.user)
    User.findOne({where: {id: req.user.id}}).then(user=>{
        var response = {
            id: user.id,
            name: user.name,
            login: user.login,
            selectedCommunity: user.selectedCommunity
        }
        res.json(response)
    }).catch(error=>{
        res.json(error)
    })
}
//---???? –º–æ–∂–µ—Ç –≤ commmunitiesController? –£–ñ–ï –°–î–ï–õ–ê–õ
//–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≥—Ä—É–ø–ø—ã (Select users from UserCommunities where communityId = '–ó–∞–¥–∞–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞')
//---????

//POST - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è (–í auth_controller)

//üëâüèº PUT - –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è/–∏–º–µ–π–ª–∞
function updateSelectedCommunity(req, res){
    
    User.update({
        selectedCommunity: req.body.selectedCommunity
    }, {
        where: {
            id: req.user.id
        }
    }).then(user=>{
        res.json({status: 'ok', rowsAffected: user})
    }).catch(error=>{
        res.json(error)
    })
    
}

//üëâüèº DELETE - —É–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏ –≤—Å–µ—Ö –≤–µ—â–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å –µ–≥–æ –ª–∏—á–Ω–æ–π –≥—Ä—É–ø–ø—ã Community, –∏ community –≥–¥–µ –æ–Ω –∞–¥–º–∏–Ω)

export {
    getUser,
    updateSelectedCommunity
}